generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  avatarId String? @unique @map("avatar_id")
  name     String
  email    String  @unique
  password String
  about    String?

  company   Company?
  developer Developer?

  avatar Avatar? @relation(fields: [avatarId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Developer {
  id                     String                @id @default(uuid())
  userId                 String                @unique @map("user_id")
  occupation_area        String
  available_for_contract Boolean?              @default(false)
  price_per_hour         Decimal?              @db.Decimal(6, 2)
  user                   User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  candidature            Candidature[]
  developerTechnology    DeveloperTechnology[]
  notification           Notification[]
}

model Company {
  id       String  @id @default(uuid())
  userId   String  @unique @map("user_id")
  city     String?
  state    String?
  site_url String?

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job[]

  @@map("companies")
}

model Avatar {
  id    String @id @default(uuid())
  title String
  url   String
  user  User?

  @@map("avatars")
}

model Job {
  id           String   @id @default(uuid())
  companyId    String   @map("company_id")
  title        String
  description  String
  workMode     String
  workSchedule String
  remuneration Int
  hoursPerWeek Int
  social_media String[]
  createdAt    DateTime @default(now()) @map("created_at")

  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  candidature Candidature[]

  @@map("jobs")
}

model Candidature {
  id          String    @id @default(uuid())
  developerId String    @map("developer_id")
  jobId       String    @map("job_id")
  status      String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  developer Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  job       Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("candidatures")
}

model Technology {
  id                  String                @id @default(uuid())
  name                String                @unique
  developerTechnology DeveloperTechnology[]

  @@map("technologies")
}

model DeveloperTechnology {
  id           String @id @default(uuid())
  developerId  String @map("developer_id")
  technologyId String @map("technology_id")

  developer  Developer  @relation(fields: [developerId], references: [id], onDelete: Cascade)
  technology Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)

  @@map("developerTechnologies")
}

model Notification {
  id          String    @id @default(uuid())
  recipientId String    @map("recipient_id")
  title       String
  content     String
  readAt      DateTime? @map("read_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  recipient Developer @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
